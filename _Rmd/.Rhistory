checkForServer() # only need to run once
startServer()
remDr <- remoteDriver$new()
remDr$open() ## open web browser
startServer()
startServer()
remDr <- remoteDriver$new()
remDr$open() ## open web browser
checkForServer() # only need to run once
startServer()
remDr <- remoteDriver$new()
remDr$open() ## open web browser
library('RCurl')
library('RSelenium')
library('XML')
checkForServer() # only need to run once
startServer()
remDr <- remoteDriver(remoteServerAddr = "localhost", port = 44455, browserName = "firefox")
remDr$open() ## open web browser
remDr <- remoteDriver(remoteServerAddr = "localhost", port = 44455, browserName = "safari")
remDr$open() ## open web browser
remDr <- remoteDriver$new()
remDr$open() ## open web browser
remDr <- remoteDriver(remoteServerAddr = "localhost", port = 4455, browserName = "safari")
remDr$open() ## open web browser
library('devtools')
install_github('ropensci/RSelenium')
library('RSelenium')
checkForServer() # only need to run once
startServer()
remDr <- remoteDriver(remoteServerAddr = "localhost", port = 4455, browserName = "safari")
remDr$open() ## open web browser
remDr <- remoteDriver(remoteServerAddr = "localhost", port = 4455, browserName = "firefox")
remDr$open() ## open web browser
remDr <- remoteDriver$new()
remDr$open() ## open web browser
remDr <- remoteDriver$new()
remDr$open() ## open web browser
remDr <- remoteDriver(remoteServerAddr = "localhost", port = 4455, browserName = "firefox")
remDr$open() ## open web browser
remDr <- remoteDriver(remoteServerAddr = "localhost", port = 4455, browserName = "safari")
remDr$open() ## open web browser
library('RSelenium')
library('XML')
checkForServer() # only need to run once
startServer()
#remDr <- remoteDriver(remoteServerAddr = "localhost", port = 4455, browserName = "safari")
remDr <- remoteDriver$new()
remDr$open() ## open web browser
checkForServer() # only need to run once
startServer()
#remDr <- remoteDriver(remoteServerAddr = "localhost", port = 4455, browserName = "safari")
remDr <- remoteDriver$new()
remDr$open() ## open web browser
remDr <- remoteDriver(remoteServerAddr = "localhost", port = 4455, browserName = "safari")
remDr$open() ## open web browser
master <- c()
for(i in 1:80) {
print(paste0('scraped page: ', i))
site <- paste0("https://www.fidelity.com/fund-screener/evaluator.shtml#!&ntf=N&ft=BAL_all&msrV=advanced&sortBy=FUND_MST_MSTAR_CTGY_NM&pgNo=",i)
remDr$navigate(site)
elem <- remDr$findElement(using="id", value="tbody") # get big table in text string
elem$highlightElement() # just for interactive use in browser
elemtxt <- elem$getElementAttribute("outerHTML")[[1]]
elemxml <- htmlTreeParse(elemtxt, useInternalNodes=T)
#site_links <- unlist(xpathApply(elemxml, '//a[@href]', xmlGetAttr, 'href'))
#site_links <- unlist(xpathApply(elemxml, '//input[@id]', xmlGetAttr, 'id'))
site_links <- unlist(xpathApply(elemxml, '//input[@title]', xmlGetAttr, 'title'))
master <- c(master, site_links)
}
master2 <- data.frame(sapply(master, function(x) substr(x, nchar(x)-5, nchar(x)-1)))
master2$name <- sapply(master, function(x) substr(x, 0, nchar(x)-8))
names(master2) <- c('ticker', 'name')
Sys.which('firefox')
#####################
## this don't work ##
#####################
url <- 'https://www.fidelity.com/fund-screener/evaluator.shtml#!&ntf=N&ft=BAL_all&msrV=advanced&sortBy=FUND_MST_MSTAR_CTGY_NM&pgNo=1'
library('httr')
page <- GET(url)
http_status(page) ## success, but not really
page_text <- content(page, as='text')
page_parsed <- content(page, as='parsed')
grepl('GMMAX', page_text) # can't find it.  grrr
grepl('Aberdeen', page_text) # can't find it. grrr
#################################################
## Selenium... this works
#################################################
library('RSelenium')
library('XML')
checkForServer() # only need to run once
startServer()
remDr <- remoteDriver(remoteServerAddr = "localhost", port = 4455, browserName="safari")
remDr <- remoteDriver$new()
remDr$open() ## open web browser
with(mtcars, mpg/2)
with(mtcars, mpg/2+ mpg*100)
checkForServer() # only need to run once
startServer()
remDr <- remoteDriver(remoteServerAddr = "localhost", port = 4455, browserName="phantomjs")
remDr <- remoteDriver$new()
#remDr$open() ## open web browser
master <- c()
for(i in 1:8) {
print(paste0('scraped page: ', i))
site <- paste0("https://www.fidelity.com/fund-screener/evaluator.shtml#!&ntf=N&ft=BAL_all&msrV=advanced&sortBy=FUND_MST_MSTAR_CTGY_NM&pgNo=",i)
remDr$navigate(site)
elem <- remDr$findElement(using="id", value="tbody") # get big table in text string
elem$highlightElement() # just for interactive use in browser
elemtxt <- elem$getElementAttribute("outerHTML")[[1]]
elemxml <- htmlTreeParse(elemtxt, useInternalNodes=T)
site_links <- unlist(xpathApply(elemxml, '//input[@title]', xmlGetAttr, 'title'))
master <- c(master, site_links)
}
library('httr')
print(paste0('scraped page: ', i))
site <- paste0("https://www.fidelity.com/fund-screener/evaluator.shtml#!&ntf=N&ft=BAL_all&msrV=advanced&sortBy=FUND_MST_MSTAR_CTGY_NM&pgNo=",i)
remDr$navigate(site)
pJS <- phantom()
pJS <- phantom() # can't get non-phantom browser to work on mac
Sys.sleep(5) # give the binary a moment
)
pJS <- phantom() # can't get non-phantom browser to work on mac
pJS <- phantom() # can't get non-phantom browser to work on mac
pJS <- phantom() # can't get non-phantom browser to work on mac
library('RSelenium')
library('XML')
pJS <- phantom() # can't get non-phantom browser to work on mac
pJS <- phantom() # can't get non-phantom browser to work on mac
Sys.sleep(5) # give the binary a moment
library('RSelenium')
library('XML')
pJS <- phantom() # can't get non-phantom browser to work on mac
pJS <- phantom() # can't get non-phantom browser to work on mac
library('RSelenium')
library('XML')
pJS <- phantom() # can't get non-phantom browser to work on mac
system('echo $PATH')
library('RSelenium')
library('XML')
pJS <- phantom() # can't get non-phantom browser to work on mac
remDr <- remoteDriver(remoteServerAddr = "localhost", port = 4455, browserName="phantomjs")
remDr <- remoteDriver$new()
master <- c()
for(i in 1:8) {
print(paste0('scraped page: ', i))
site <- paste0("https://www.fidelity.com/fund-screener/evaluator.shtml#!&ntf=N&ft=BAL_all&msrV=advanced&sortBy=FUND_MST_MSTAR_CTGY_NM&pgNo=",i)
remDr$navigate(site)
elem <- remDr$findElement(using="id", value="tbody") # get big table in text string
elem$highlightElement() # just for interactive use in browser
elemtxt <- elem$getElementAttribute("outerHTML")[[1]]
elemxml <- htmlTreeParse(elemtxt, useInternalNodes=T)
site_links <- unlist(xpathApply(elemxml, '//input[@title]', xmlGetAttr, 'title'))
master <- c(master, site_links)
}
master2 <- data.frame(sapply(master, function(x) substr(x, nchar(x)-5, nchar(x)-1)))
master2$name <- sapply(master, function(x) substr(x, 0, nchar(x)-8))
names(master2) <- c('ticker', 'name')
print(paste0('scraped page: ', i))
site <- paste0("https://www.fidelity.com/fund-screener/evaluator.shtml#!&ntf=N&ft=BAL_all&msrV=advanced&sortBy=FUND_MST_MSTAR_CTGY_NM&pgNo=",i)
remDr$navigate(site)
remDr <- remoteDriver(remoteServerAddr = "localhost", browserName="phantomjs")
remDr <- remoteDriver$new()
remDr$open()
print(paste0('scraped page: ', i))
site <- paste0("https://www.fidelity.com/fund-screener/evaluator.shtml#!&ntf=N&ft=BAL_all&msrV=advanced&sortBy=FUND_MST_MSTAR_CTGY_NM&pgNo=",i)
remDr$navigate(site)
elem <- remDr$findElement(using="id", value="tbody") # get big table in text string
pJS <- phantom() # can't get non-phantom browser to work on mac
checkForServer() # only need to run once
startServer()
remDr <- remoteDriver(remoteServerAddr = "localhost", browserName="phantomjs")
remDr <- remoteDriver$new()
#remDr$open() ## open web browser
master <- c()
for(i in 1:8) {
print(paste0('scraped page: ', i))
site <- paste0("https://www.fidelity.com/fund-screener/evaluator.shtml#!&ntf=N&ft=BAL_all&msrV=advanced&sortBy=FUND_MST_MSTAR_CTGY_NM&pgNo=",i)
remDr$navigate(site)
elem <- remDr$findElement(using="id", value="tbody") # get big table in text string
elem$highlightElement() # just for interactive use in browser
elemtxt <- elem$getElementAttribute("outerHTML")[[1]]
elemxml <- htmlTreeParse(elemtxt, useInternalNodes=T)
site_links <- unlist(xpathApply(elemxml, '//input[@title]', xmlGetAttr, 'title'))
master <- c(master, site_links)
}
i
i<-3
print(paste0('scraped page: ', i))
site <- paste0("https://www.fidelity.com/fund-screener/evaluator.shtml#!&ntf=N&ft=BAL_all&msrV=advanced&sortBy=FUND_MST_MSTAR_CTGY_NM&pgNo=",i)
remDr$navigate(site)
remDr <- remoteDriver(remoteServerAddr = "localhost", browserName="firefox")
remDr <- remoteDriver$new()
master <- c()
for(i in 1:8) {
print(paste0('scraped page: ', i))
site <- paste0("https://www.fidelity.com/fund-screener/evaluator.shtml#!&ntf=N&ft=BAL_all&msrV=advanced&sortBy=FUND_MST_MSTAR_CTGY_NM&pgNo=",i)
remDr$navigate(site)
}
remDr <- remoteDriver(remoteServerAddr = "localhost", browserName="phantomjs")
remDr <- remoteDriver$new()
print(paste0('scraped page: ', i))
site <- paste0("https://www.fidelity.com/fund-screener/evaluator.shtml#!&ntf=N&ft=BAL_all&msrV=advanced&sortBy=FUND_MST_MSTAR_CTGY_NM&pgNo=",i)
pJS
pJS <- phantom() # can't get non-phantom browser to work on mac
remDr$close()
pJS$stop()
pJS <- phantom() # can't get non-phantom browser to work on mac
pJS$stop()
remDr$close()
remDr$close
pJS$stop()
pJS <- phantom() # can't get non-phantom browser to work on mac
library('RSelenium')
library('XML')
pJS <- phantom() # can't get non-phantom browser to work on mac
remDr <- remoteDriver(browserName = "phantomjs")
print(paste0('scraped page: ', i))
i<-3
print(paste0('scraped page: ', i))
site <- paste0("https://www.fidelity.com/fund-screener/evaluator.shtml#!&ntf=N&ft=BAL_all&msrV=advanced&sortBy=FUND_MST_MSTAR_CTGY_NM&pgNo=",i)
remDr$navigate(site)
remDr
remDr <- remoteDriver(remoteServerAddr = "localhost", browserName="phantomjs")
print(paste0('scraped page: ', i))
site <- paste0("https://www.fidelity.com/fund-screener/evaluator.shtml#!&ntf=N&ft=BAL_all&msrV=advanced&sortBy=FUND_MST_MSTAR_CTGY_NM&pgNo=",i)
remDr$navigate(site)
site
pJS2 <- phantom()
Sys.sleep(5)
remDr <- remoteDriver(browserName = "phantomjs")
remDr$open()
library('RSelenium')
pJS2 <- phantom()
pJS2$stop()
pJS2$stop()
remDr$close
pJS2
pJS4
pJS2 <- phantom()
load('/Downloads/hhs.Rdata')
load('Downloads/hhs.Rdata')
View(data)
data.frame(names(data))
str(data)
data.frame(names(data))
hist(data$OverallRating)
table(data$OverallRating)
table(data$Start_Month)
pJS <- phantom() # can't get non-phantom browser to work on mac
library('RSelenium')
library('XML')
pJS <- phantom() # can't get non-phantom browser to work on mac
master <- c()
checkForServer() # only need to run once
startServer()
remDr <- remoteDriver(remoteServerAddr = "localhost", browserName="phantomjs")
print(paste0('scraped page: ', i))
i<-3
print(paste0('scraped page: ', i))
site <- paste0("https://www.fidelity.com/fund-screener/evaluator.shtml#!&ntf=N&ft=BAL_all&msrV=advanced&sortBy=FUND_MST_MSTAR_CTGY_NM&pgNo=",i)
remDr$navigate(site)
remDr
remDr <- remoteDriver(browserName = "phantomjs")
print(paste0('scraped page: ', i))
site <- paste0("https://www.fidelity.com/fund-screener/evaluator.shtml#!&ntf=N&ft=BAL_all&msrV=advanced&sortBy=FUND_MST_MSTAR_CTGY_NM&pgNo=",i)
remDr$navigate(site)
remDr$close()
pJS$stop()
pJS <- phantom() # can't get non-phantom browser to work on mac
pJS <- phantom(port = 4455) # can't get non-phantom browser to work on mac
pJS <- phantom(port = 4455) # can't get non-phantom browser to work on mac
pJS <- phantom(port = 4444) # can't get non-phantom browser to work on mac
library('knitr')
install.packages('knitr')
library('knitr')
library('RSelenium')
library('XML')
remDr <- remoteDriver(remoteServerAddr = "localhost", browserName="firefox")
remDr$open() ## open web browser
master <- c()
for(i in 1:30) {
print(paste0('scraped page: ', i))
site <- paste0("https://www.fidelity.com/fund-screener/evaluator.shtml#!&ntf=N&ft=BAL_all&msrV=advanced&sortBy=FUND_MST_MSTAR_CTGY_NM&pgNo=",i)
remDr$navigate(site)
elem <- remDr$findElement(using="id", value="tbody") # get big table in text string
elem$highlightElement() # just for interactive use in browser
elemtxt <- elem$getElementAttribute("outerHTML")[[1]]
elemxml <- htmlTreeParse(elemtxt, useInternalNodes=T)
site_links <- unlist(xpathApply(elemxml, '//input[@title]', xmlGetAttr, 'title'))
master <- c(master, site_links)
}
master2 <- data.frame(sapply(master, function(x) substr(x, nchar(x)-5, nchar(x)-1)))
master2$name <- sapply(master, function(x) substr(x, 0, nchar(x)-8))
names(master2) <- c('ticker', 'name')
master2
load('/Users/abrooks/Box Sync/hhs/data/hhs.Rdata')
d <- data
rm(data)
## checking number of unique fields per variable
a1 <- data.frame(sapply(d, class))
a1$v <- rownames(a1)
a2 <- data.frame(sapply(d, function(x) length(unique(x))))
a2$v <- rownames(a2)
a <- merge(a1, a2, by='v')
plotdf(d, file='/User/abrooks/Box Sync/hhs/results/plotdf_charts.pdf')
library('Rsenal')
plotdf(d, file='/User/abrooks/Box Sync/hhs/results/plotdf_charts.pdf')
plotdf(d, file='/Box Sync/hhs/results/plotdf_charts.pdf')
plotdf(d, file='/Users/abrooks/Box Sync/hhs/results/plotdf_charts.pdf')
url <- 'https://www.fidelity.com/fund-screener/evaluator.shtml#!&ntf=N&ft=BAL_all&msrV=advanced&sortBy=FUND_MST_MSTAR_CTGY_NM&pgNo=1'
library('RSelenium')
library('XML')
#pJS <- phantom() # can't get non-phantom browser to work on mac
checkForServer() # only need to run once
startServer()
remDr <- remoteDriver(remoteServerAddr = "localhost", browserName="firefox")
#remDr <- remoteDriver(browserName = "phantomjs")
remDr$open() ## open web browser
library('RSelenium')
library('XML')
#pJS <- phantom() # can't get non-phantom browser to work on mac
checkForServer() # only need to run once
startServer()
remDr <- remoteDriver(remoteServerAddr = "localhost", browserName="firefox")
#remDr <- remoteDriver(browserName = "phantomjs")
remDr$open() ## open web browser
library('RSelenium')
library('XML')
#pJS <- phantom() # can't get non-phantom browser to work on mac
pJS <- phantom() # can't get non-phantom browser to work on mac
checkForServer() # only need to run once
startServer()
remDr <- remoteDriver(remoteServerAddr = "localhost", browserName="firefox")
#remDr <- remoteDriver(browserName = "phantomjs")
remDr$open() ## open web browser
library('RSelenium')
library('XML')
pJS <- phantom()
checkForServer()
library('knitr')
knit(files.rmd$rmd[i], output = files.rmd$corresponding.md.file[i])
# convert all Rmd files in _Rmd/* to markdown files
# directory of jekyll blog (including trailing slash)
site.path <- "/Users/abrooks/Documents/github/simpleblog/"
# directory where your Rmd-files reside (relative to base)
rmd.path <- paste0(site.path, "_Rmd")
# directory to save figures
fig.dir <- "Rfig/"
# directory for converted markdown files
posts.path <- paste0(site.path, "_posts/articles/")
# cache
cache.path <- paste0(site.path, "_cache")
require(knitr)
render_jekyll(highlight = "pygments")
# "base.dir is never used when composing the URL of the figures; it is
# only used to save the figures to a different directory, which can
# be useful when you do not want the figures to be saved under the
# current working directory.
# The URL of an image is always base.url + fig.path"
# https://groups.google.com/forum/#!topic/knitr/18aXpOmsumQ
opts_knit$set(base.url = "/simpleblog/",
base.dir = site.path)
opts_chunk$set(fig.path   = fig.dir,
fig.width  = 8.5,
fig.height = 5.25,
dev        = 'svg',
cache      = FALSE,
warning    = FALSE,
message    = FALSE,
cache.path = cache.path,
tidy       = FALSE)
# setwd to base
setwd(rmd.path)
# some logic to help us avoid overwriting already existing md files
files.rmd <-
data.frame(rmd = list.files(path = rmd.path,
full.names = TRUE,
pattern = "\\.Rmd$",
ignore.case = TRUE,
recursive = FALSE))
files.rmd$corresponding.md.file <-
paste0(posts.path, "/",
basename(gsub(pattern = "\\.Rmd$",
replacement = ".md",
x = files.rmd$rmd)))
files.rmd$corresponding.md.exists <- file.exists(files.rmd$corresponding.md.file)
files.rmd$md.overwrite <- overwrite
files.rmd$md.render <- FALSE
for (i in 1:dim(files.rmd)[1]) {
if (files.rmd$corresponding.md.exists[i] == FALSE) {
files.rmd$md.render[i] <- TRUE
}
if ((files.rmd$corresponding.md.exists[i] == TRUE) &&
(files.rmd$md.overwrite[i] == TRUE)) {
files.rmd$md.render[i] <- TRUE
}
}
# For each Rmd file, render markdown (contingent on the flags set above)
for (i in 1:dim(files.rmd)[1]) {
# if clause to make sure we only re-knit if overwrite==TRUE or .md not already existing
if (files.rmd$md.render[i] == TRUE) {
# KNITTING ----
#out.file <- basename(knit(files.rmd$rmd[i], envir = parent.frame(), quiet = TRUE))
out.file <-
knit(files.rmd$rmd[i],
output = files.rmd$corresponding.md.file[i],
envir = parent.frame(),
quiet = TRUE)
message(paste0("KnitPost(): ", basename(files.rmd$rmd[i])))
}
}
knit(files.rmd$rmd[i], output = files.rmd$corresponding.md.file[i])
knit(files.rmd$rmd[i], output = files.rmd$corresponding.md.file[i])
knit(files.rmd$rmd[i], output = files.rmd$corresponding.md.file[i])
files.rmd$rmd[i], output = files.rmd$corresponding.md.file[i])
files.rmd$rmd[i]
files.rmd$corresponding.md.file[i]
library('knitr')
knit(files.rmd$rmd[i], output = files.rmd$corresponding.md.file[i])
knit(as.character(files.rmd$rmd[i]), output = files.rmd$corresponding.md.file[i])
knit(as.character(files.rmd$rmd[i]), output = files.rmd$corresponding.md.file[i])
install.packages('markdown')
knit(as.character(files.rmd$rmd[i]), output = files.rmd$corresponding.md.file[i])
knit(as.character(files.rmd$rmd[i]))
library('devtools')
install_github('yihui/knitr')
library('knitr')
knit(as.character(files.rmd$rmd[i]), output = files.rmd$corresponding.md.file[i])
#!/usr/bin/env Rscript
options(stringsAsFactors = FALSE)
# inspiration sources:
# http://www.jonzelner.net/jekyll/knitr/r/2014/07/02/autogen-knitr/
# http://gtog.github.io/workflow/2013/06/12/rmarkdown-to-rbloggers/
KnitPost <- function(overwrite = FALSE) {
# convert all Rmd files in _Rmd/* to markdown files
# directory of jekyll blog (including trailing slash)
site.path <- "/Users/abrooks/Documents/github/simpleblog/"
# directory where your Rmd-files reside (relative to base)
rmd.path <- paste0(site.path, "_Rmd")
# directory to save figures
fig.dir <- "Rfig/"
# directory for converted markdown files
posts.path <- paste0(site.path, "_posts/articles/")
# cache
cache.path <- paste0(site.path, "_cache")
require(knitr)
render_jekyll(highlight = "pygments")
# "base.dir is never used when composing the URL of the figures; it is
# only used to save the figures to a different directory, which can
# be useful when you do not want the figures to be saved under the
# current working directory.
# The URL of an image is always base.url + fig.path"
# https://groups.google.com/forum/#!topic/knitr/18aXpOmsumQ
opts_knit$set(base.url = "/simpleblog/",
base.dir = site.path)
opts_chunk$set(fig.path   = fig.dir,
fig.width  = 8.5,
fig.height = 5.25,
dev        = 'svg',
cache      = FALSE,
warning    = FALSE,
message    = FALSE,
cache.path = cache.path,
tidy       = FALSE)
# setwd to base
setwd(rmd.path)
# some logic to help us avoid overwriting already existing md files
files.rmd <-
data.frame(rmd = list.files(path = rmd.path,
full.names = TRUE,
pattern = "\\.Rmd$",
ignore.case = TRUE,
recursive = FALSE))
files.rmd$corresponding.md.file <-
paste0(posts.path, "/",
basename(gsub(pattern = "\\.Rmd$",
replacement = ".md",
x = files.rmd$rmd)))
files.rmd$corresponding.md.exists <- file.exists(files.rmd$corresponding.md.file)
files.rmd$md.overwrite <- overwrite
files.rmd$md.render <- FALSE
for (i in 1:dim(files.rmd)[1]) {
if (files.rmd$corresponding.md.exists[i] == FALSE) {
files.rmd$md.render[i] <- TRUE
}
if ((files.rmd$corresponding.md.exists[i] == TRUE) &&
(files.rmd$md.overwrite[i] == TRUE)) {
files.rmd$md.render[i] <- TRUE
}
}
# For each Rmd file, render markdown (contingent on the flags set above)
for (i in 1:dim(files.rmd)[1]) {
# if clause to make sure we only re-knit if overwrite==TRUE or .md not already existing
if (files.rmd$md.render[i] == TRUE) {
# KNITTING ----
#out.file <- basename(knit(files.rmd$rmd[i], envir = parent.frame(), quiet = TRUE))
out.file <-
knit(files.rmd$rmd[i],
output = files.rmd$corresponding.md.file[i],
envir = parent.frame(),
quiet = TRUE)
message(paste0("KnitPost(): ", basename(files.rmd$rmd[i])))
}
}
}
KnitPost(overwrite = T)
knit(as.character(files.rmd$rmd[i]), output = files.rmd$corresponding.md.file[i])
library('knitr')
knit(as.character(files.rmd$rmd[i]), output = files.rmd$corresponding.md.file[i])
library('knitr')
knit(as.character(files.rmd$rmd[i]), output = files.rmd$corresponding.md.file[i])
