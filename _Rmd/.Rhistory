## might need to rebuild knitr to avoid "cairo graphics error
#library('devtools')
#install_github('yihui/knitr')
#library('knitr')
## source of code
#http://chepec.se/blog/2014/07/16/knitr-jekyll.html
#!/usr/bin/env Rscript
options(stringsAsFactors = F)
# inspiration sources:
# http://www.jonzelner.net/jekyll/knitr/r/2014/07/02/autogen-knitr/
# http://gtog.github.io/workflow/2013/06/12/rmarkdown-to-rbloggers/
KnitPost <- function(site.path='/Users/abrooks/Documents/github/simpleblog/', overwriteAll=F, overwriteOne=NULL) {
if(!'package:knitr' %in% search()) library('knitr')
site.path <- site.path # directory of jekyll blog (including trailing slash)
rmd.path <- paste0(site.path, "_Rmd") # directory where your Rmd-files reside (relative to base)
fig.dir <- "assets/Rfig/" # directory to save figures
posts.path <- paste0(site.path, "_posts/articles/") # directory for converted markdown files
cache.path <- paste0(site.path, "_cache") # necessary for plots
render_jekyll(highlight = "pygments")
opts_knit$set(base.url = '/', base.dir = site.path)
opts_chunk$set(fig.path=fig.dir, fig.width=8.5, fig.height=5.25, dev='svg', cache=F,
warning=F, message=F, cache.path=cache.path, tidy=F)
setwd(rmd.path) # setwd to base
# some logic to help us avoid overwriting already existing md files
files.rmd <- data.frame(rmd = list.files(path = rmd.path,
full.names = T,
pattern = "\\.Rmd$",
ignore.case = T,
recursive = F), stringsAsFactors=F)
files.rmd$corresponding.md.file <- paste0(posts.path, "/", basename(gsub(pattern = "\\.Rmd$", replacement = ".md", x = files.rmd$rmd)))
files.rmd$corresponding.md.exists <- file.exists(files.rmd$corresponding.md.file)
## determining which posts to overwrite from parameters overwriteOne & overwriteAll
files.rmd$md.overwriteAll <- overwriteAll
if(is.null(overwriteOne)==F) files.rmd$md.overwriteAll[grep(overwriteOne, files.rmd[,'rmd'], ignore.case=T)] <- T
files.rmd$md.render <- F
for (i in 1:dim(files.rmd)[1]) {
if (files.rmd$corresponding.md.exists[i] == F) {
files.rmd$md.render[i] <- T
}
if ((files.rmd$corresponding.md.exists[i] == T) && (files.rmd$md.overwriteAll[i] == T)) {
files.rmd$md.render[i] <- T
}
}
# For each Rmd file, render markdown (contingent on the flags set above)
for (i in 1:dim(files.rmd)[1]) {
if (files.rmd$md.render[i] == T) {
out.file <- knit(as.character(files.rmd$rmd[i]),
output = as.character(files.rmd$corresponding.md.file[i]),
envir = parent.frame(),
quiet = T)
message(paste0("KnitPost(): ", basename(files.rmd$rmd[i])))
}
}
}
## actually using function
#KnitPost(overwriteOne='test', site.path='/Users/ajb/Documents/github/simpleblog/')
KnitPost(overwriteOne='advanced-data-table', site.path='/Users/ajb/Documents/github/simpleblog/')
library('data.table')
library('data.table')
library('data.table')
dt <- data.table(mtcars)[,.(mpg, cyl, gear)]
dt[, L:=list(list(c(1,2,3)))]
dt[, a:=list(list(unique(mpg))), by=.(cyl, gear)]
head(dt)
dt[,a[[1]]]
dt[,a[[1]]]
dt[,lapply(a, [[1]])]
dt[,lapply(a, function(x) x[[1]])]
dt[,a[[2]]]
dt[,a[[4]]]
dt <- data.table(mtcars)[,.(mpg, cyl, gear)]
dt[, L:=list(list(c(1,2,3)))]
dt[, mpgL:=list(list(unique(mpg))), by=.(cyl, gear)]
head(dt)
dt[,lapply(mpgL, function(x) x[[1]])]
dt[,lapply(mpgL, function(x) x[[1]][1])]
dt[,lapply(mpgL, function(x) x[[1]][2])]
dt[,lapply(mpgL, function(x) x[[2]])]
dt[,lapply(mpgL, function(x) x[1])]
dt[,lapply(mpgL, function(x) x[2])]
# second element of each list in column `mpgL`
dt[,lapply(mpgL, function(x) x[2])]
head(dt)
dt[,e2_mpgL:=lapply(mpgL, function(x) x[2])]
head(dt)
dt[,e2_mpgL:=lapply(mpgL, function(x) x[2])][]
(dt[,e2_mpgL:=lapply(mpgL, function(x) x[2])])
(dt[,e2_mpgL:=lapply(mpgL, function(x) x[2])])
(df <- haed(mtcars))
(df <- head(mtcars))
dt[,hp2wt:=hp/wt]
dt <- data.table(mtcars)
dt[,hp2wt:=hp/wt]
dt[,hp2wt:=hp/wt][]
dt[,hp2wt:=hp/wt][head]
dt[,hp2wt:=hp/wt][head(x)]
dt[,hp2wt:=hp/wt][head(x),]
dt <- data.table(head(mtcars))
dt <- data.table(head(mtcars))
dt <- data.table(head(mtcars))
dt[,hp2wt:=hp/wt][]
# data.frame way of printing after an assignment
# data.frame way of printing after an assignment
df <- head(mtcars) # doesn't print
(df <- head(mtcars) # does print
# data.table way of printing after an assignment
dt <- data.table(head(mtcars)) # doesn't print
dt <- data.table(head(mtcars)) # doesn't print
# data.table way of printing after an assignment
dt <- data.table(head(mtcars)) # doesn't print
dt[,hp2wt:=hp/wt][] # does print
# data.frame way of printing after an assignment
df <- head(mtcars) # doesn't print
(df <- head(mtcars)) # does print
# data.table way of printing after an assignment
dt <- data.table(head(mtcars)) # doesn't print
dt[,hp2wt:=hp/wt][] # does print
dt <- data.table(mtcars)[,.(mpg, cyl, gear)]
dt[, L:=list(list(c(1,2,3)))]
dt[, mpgL:=list(list(unique(mpg))), by=.(cyl, gear)]
head(dt)
dt <- data.table(mtcars)
dt[, dt[!gear %in% unique(dt$gear)[.GRP], mean(mpg), by=cyl], by=gear] #unbiased mean
uid <- unique(dt$gear)
dt[, dt[!gear %in% (uid[.GRP]), mean(mpg), by=cyl] , by=gear][order(cyl, gear)] #unbiased mean
dt[, .GRP, by=cyl]
dt[, .(.GRP, unique(dt$gear)[.GRP]), by=cyl]
dt[,dt[, .(.GRP, unique(dt$gear)[.GRP]), by=cyl], by=gear]
# 1.b setting key
setkey(dt, gear)
uid <- unique(dt$gear)
dt[, dt[!.(uid[.GRP]), mean(mpg), by=cyl] , by=gear] #unbiased mean
mean(dt[cyl==4 & gear!=3,mpg]) # testing
mean(dt[cyl==6 & gear!=3,mpg]) # testing
dt[,  .SD[, mean(mpg)], by=gear]
dt[,  .SD[, mean(mpg), by=cyl], by=gear]
dt[,  {uid=unique(cyl); .SD[, mean(mpg), by=cyl]} , by=gear]
dt[,sum(mpg), by=cyl] # test
dt[,{
vbar = mean(mpg)
n = .N
.SD[,(n*vbar-sum(mpg))/(n-.N),by=gear]
} , by=cyl]
dt[,lapply(mpg, setdiff(mpgL, mpg))]
dt[, mpgL:=list(list(unique(mpg))), by=.(cyl, gear)]
dt[,lapply(mpg, setdiff(mpgL, mpg))]
dt[,lapply(mpg, setdiff(.SD, mpg)), .SDcols='mpg']
dt[,lapply(mpg, function(x) setdiff(.SD, mpg)), .SDcols='mpg']
dt[,lapply(mpgL, function(x, y=) setdiff(x, y))]
dt[,lapply(mpgL, function(x, y=mpg) setdiff(x, y))]
dt[,lapply(mpgL, function(x, y=.SD) setdiff(x, y)), .SDcols='mpg']
dt[,bb:=lapply(mpgL, function(x, y=.SD) setdiff(x, y)), .SDcols='mpg']
dt[,bb:=lapply(mpgL, function(x[[1]], y=.SD) setdiff(x, y)), .SDcols='mpg']
dt[,bb:=lapply(mpgL, function(x, y=.SD) setdiff(x[[1]], y)), .SDcols='mpg']
dt[,bb:=lapply(mpgL, function(x, y=.SD) setdiff(x[1], y)), .SDcols='mpg']
dt[,bb:=lapply(mpgL, function(x, y=.SD) setdiff(x, y)), .SDcols='mpg']
dt[,lapply(mpgL, function(x, y=.SD) setdiff(x, y)), .SDcols='mpg']
dt[,lapply(mpgL, function(x) setdiff(.SD, x)), .SDcols='mpgL']
dt[,lapply(mpgL, function(x, y=dt$mpg) setdiff(y, x)), .SDcols='mpgL']
dt[,lapply(mpgL, function(x, y=dt$mpg) setdiff(y, x))]
dt[,setdiff(x, y=dt$mpg)]
dt[,setdiff(mpg, y=dt$mpg)]
dt[,setdiff(mpgL, y=dt$mpg)]
dt
dt[,g1:=setdiff(mpgL, y=dt$mpg)]
dt[,g1:=setdiff(mpgL[[1]], y=dt$mpg)]
dt[,g1:=setdiff(1, y=mpg)]
dt[,g1:=lapply(mpgL, function(x) x[1]]
dt[,g1:=lapply(mpgL, function(x) x[1])]
dt[,g1:=lapply(mpgL, function(x) x[1])][]
dt[,g1:=lapply(mpgL, function(x) x[1:.N])][]
dt[,g1:=lapply(mpgL, function(x) x)][]
dt[,g1:=lapply(mpgL, function(x) setdiff(x[1:2], x[2:3])][]
dt[,g1:=lapply(mpgL, function(x) setdiff(x[1], x[2])][]
dt[,g1:=lapply(mpgL, function(x) setdiff(x[1], x[2]))][]
setdiff(1:10, 3)
dt[,g1:=lapply(mpgL, function(x) setdiff(x, x[2]))][]
dt[,g1:=lapply(mpgL, function(x) setdiff(x, mpg))][]
dt[,g1:=lapply(mpgL, function(x, y=mpg) setdiff(x, y))][]
dt[,g1:=lapply(mpgL, function(x, y=mpg) setdiff(x, y))][]
dt$mpg
dt[,g1:=lapply(mpgL, function(x, y=dt$mpg) setdiff(x, y))][]
dt[,g1:=lapply(mpgL, function(x) setdiff(x, dt$y))][]
dt <- data.table(mtcars)[,.(mpg, cyl, gear)]
dt[, L:=list(list(c(1,2,3)))]
dt[, mpgL:=list(list(unique(mpg))), by=.(cyl, gear)]
head(dt)
dt[,g1:=lapply(mpgL, function(x) setdiff(x, dt$y))][]
dt[,g1:=lapply(mpgL, function(x) setdiff(x, dt$mpg))][]
dt[,g1:=lapply(mpgL, function(x) setdiff(x, dt$mpg[1]))][]
dt[,g1:=lapply(mpgL, function(x, y) setdiff(x, y))][]
dt[,g1:=lapply(mpgL, function(x, y) setdiff(x, y[1]))][]
dt[,g1:=lapply(mpgL, function(x, y=mpg) setdiff(x, y[1]))][]
dt[,g1:=lapply(mpgL, function(x, y=mpg) setdiff(x, y))][]
dt[,g1:=lapply(mpgL, function(x, y=dt$mpg) setdiff(x, y))][]
dt[,g1:=lapply(mpgL, function(x, y=dt$mpg) c(x, y))][]
dt[,g1:=lapply(mpgL, function(x, y=dt$mpg) c(x, y)), by=1:.N][]
dt[,g1:=lapply(mpgL, function(x, y=dt$mpg) c(x, y)), by=1:32][]
dt[,g1:=lapply(mpgL, function(x, y=dt$mpg) c(x, y)), by=seq_along(1:32)][]
seq_along(3)
seq_along(5)
seq_along(5,10)
seq_along(1:4)
seq_along(1:32)
dt[,g1:=lapply(mpgL, function(x, y=dt$mpg) c(x, y)), by=seq_along(1:32)][]
dt[,g1:=lapply(mpgL, function(x, y=dt$mpg) y, by=seq_along(1:32)][]
dt[,g1:=lapply(mpgL, function(x, y=dt$mpg) x, by=seq_along(1:32)][]
dt[,g1:=lapply(mpgL, function(x, y=dt$mpg) x), by=seq_along(1:32)][]
dt[,g1:=lapply(mpgL, function(x, y=dt$mpg) x)][]
dt[,g1:=lapply(mpgL, function(x, y=dt$mpg) mpg)][]
dt[,g1:=lapply(mpgL, function(x, y=dt$mpg) mpg[[1]])][]
[]
dt[, mpg %in% mpgL]
dt[, setdiff(mpgL[1], mpg)]
dt[, setdiff(mpgL[[1]], mpg)]
dt[, a:=setdiff(mpgL[1], mpg)]
dt[, aa:=setdiff(mpgL[1], mpg)]
dt[, aa:=setdiff(list(mpgL[1]), mpg)]
dt[, aa:=setdiff(mpgL[[1]], mpg)]
dt[,setdiff(am, vs)]
dt[,setdiff(cyl, vs)]
dt[,setdiff(cyl, vs)]
dt
dt <- data.table(mtcrs)
dt <- data.table(mtcars)
dt[,setdiff(am, vs)]
dt[,setdiff(am, cyl)]
dt[,b:=setdiff(am, cyl)]
dt[,b:=setdiff(am, cyl)][]
dt[,b:=setdiff(c(am, carb), cyl)][]
dt[,b:=setdiff(c(am, carb), cyl)][]
dt[,b2:=setdiff(c(am, carb), cyl)][]
a[,gearL:=list(list(unique(gear))), by=.(cyl)]
a <- data.table(mtcars)
#a <- a[!(cyl==4 & gear!=4),]
a[,gearL:=list(list(unique(gear))), by=.(cyl)]
a[,gearL2:=lapply(gear, function(x) setdiff(gearL[[1]], x)[[2]][1])]
a
a[,, by=.(cyl)][!gear %in% gearL[[1]][1], r:=mean(mpg)]
a
a[,gearL2:=lapply(gear, function(x) setdiff(gearL[[1]], x)[1])]
a[,gearL2:=lapply(gear, function(x) setdiff(gearL[[1]], x)[1])][]
a <- data.table(mtcars)
#a <- a[!(cyl==4 & gear!=4),]
a[,gearL:=list(list(unique(gear))), by=.(cyl)]
a[,gearL2:=lapply(gear, function(x) setdiff(gearL[[1]], x)[1])][]
a[,gearL2:=lapply(gear, function(x) setdiff(gearL[[1]], x))][]
a[,gearL2:=lapply(1:.N, function(x) setdiff(gearL[[x]], gear))][]
a[,gearL2:=lapply(1:.N, function(x) setdiff(gearL[[x]], gear[x]))][]
dt <- dt[sample(1:.N, 100000, replace=T)]
dt
a[,gearL2:=lapply(1:.N, function(x) setdiff(gearL[[x]], gear[x]))][]
a <- a[sample(1:.N, 100000, replace=T)]
a[,gearL:=list(list(unique(gear))), by=.(cyl)]
a[,gearL2:=lapply(1:.N, function(x) setdiff(gearL[[x]], gear[x]))][]
a[,gearL2:=setdiff(cyl, gear)][]
a[,gearL3:=setdiff(cyl, gear)][]
a[gear==4,gearL3:=setdiff(cyl, gear)][]
a[, gearL3:=setdiff(cyl, gear)][gear==4,]
a[, gearL3:=setdiff(cyl, gear)][gear==4 & cyl==4,]
system.time(dt[,mpgL:=lapply(1:.N, function(x) setdiff(mpgL[[x]], mpg[x]))][])
dt[,e2_mpgL:=lapply(mpgL, function(x) x[2])]
dt <- data.table(mtcars)[,.(mpg, cyl, gear)]
dt[, L:=list(list(c(1,2,3)))]
dt[, mpgL:=list(list(unique(mpg))), by=.(cyl, gear)]
head(dt)
dt[,e2_mpgL:=lapply(mpgL, function(x) x[2])]
head(dt)
# setdiff
system.time(dt[,mpgL:=lapply(1:.N, function(x) setdiff(mpgL[[x]], mpg[x]))][])
dt <- dt[sample(1:.N, 10000, replace=T,]
dt <- dt[sample(1:.N, 10000, replace=T),]
system.time(dt[,mpgL:=lapply(1:.N, function(x) setdiff(mpgL[[x]], mpg[x]))][])
dt <- dt[sample(1:.N, 100000, replace=T),]
system.time(dt[,mpgL:=lapply(1:.N, function(x) setdiff(mpgL[[x]], mpg[x]))][])
system.time(dt[,mpgL:=mapply(setdiff(x,y), x=mpgL, y=mpg))
system.time(dt[,mpgL:=mapply(setdiff(x,y), x=mpgL, y=mpg)])
system.time(dt[,mpgL:=mapply(function(x,y) setdiff(x,y), x=mpgL, y=mpg)])
system.time(dt[,mpgL:=lapply(1:.N, function(x) setdiff(mpgL[[x]], mpg[x]))][])
system.time(dt[,mpgL2:=mapply(function(x,y) setdiff(x,y), x=mpgL, y=mpg)])
head(dt)
dt <- data.table(mtcars)[,.(mpg, cyl, gear)]
dt[, L:=list(list(c(1,2,3)))]
dt[, mpgL:=list(list(unique(mpg))), by=.(cyl, gear)]
head(dt)
dt[,mpgL[[4]]]
dt[,b:=mpgL[[4]]]
dt
dt[,e2_mpgL:=lapply(mpgL, function(x) x[2])]
head(dt)
# setdiff
dt <- data.table(dt)[sample(1:.N, 100000, replace=T),]
dt[, mpgL:=list(list(unique(mpg))), by=.(cyl, gear)]
system.time(dt[,mpgL1:=lapply(1:.N, function(x) setdiff(mpgL[[x]], mpg[x]))][])
system.time(dt[,mpgL2:=mapply(function(x,y) setdiff(x,y), x=mpgL, y=mpg)])
head(dt)
dt[,-1]
dt[,-1, with=FALSE]
dt[,1, with=FALSE]
dt[,table(mpgL1==mpgL2)]
dt[,mapply(function(x,y) table(x,y), x=mpgL1, y=mpgL2)]
dt[,gearsL:=list(list(unique(gear))), by=.(cyl)]
dt[,gearL1:=lapply(gear, function(x) x[[1]])]
# calculate all the gears for all cars of each cyl (excluding the current current row).
# This can be useful for comparing observations to the mean of groups, where the group mean is not biased by the observation of interest.
dt[,other_gear:=mapply(function(x, y) setdiff(x, y) ,x=gearsL, y=gear)]
dt
dt <- data.table(mtcars)
dt[,gearsL:=list(list(unique(gear))), by=.(cyl)]
head(dt)
dt <- data.table(mtcars)
dt[, dt[!gear %in% unique(dt$gear)[.GRP], mean(mpg), by=cyl], by=gear] #unbiased mean
dt[, dt[!gear %in% unique(dt$gear)[.GRP], mean(mpg), by=cyl], by=gear] #unbiased mean
dt[gear!=4 & cyl==6,mean(mpg)]
dt[, .GRP, by=cyl]
dt[, .(.GRP, unique(dt$gear)[.GRP]), by=cyl]
dt[,dt[, .(.GRP, unique(dt$gear)[.GRP]), by=cyl], by=gear]
dt[, mpg_biased_mean:=mean(mpg), by=cyl] # for comparison
head(dt)
setkey(dt, gear)
uid <- unique(dt$gear)
dt[, dt[!.(uid[.GRP]), mean(mpg), by=cyl] , by=gear] #unbiased mean
mean(dt[cyl==4 & gear!=3,mpg]) # testing
mean(dt[cyl==6 & gear!=3,mpg]) # testing
dt[, mpg_biased_mean:=mean(mpg), by=cyl] # for comparison
head(dt)
dt[,  .SD[, mean(mpg)], by=gear]
dt[,  .SD[, mean(mpg), by=cyl], by=gear]
dt[,  .SD[, mean(mpg), by=cyl], by=gear]
dt[,  {uid=unique(cyl); .SD[, mean(mpg), by=cyl]} , by=gear]
dt[,{
vbar = sum(mpg)
n = .N
.SD[,.(n, .N, sum_in_gear_cyl=sum(mpg), sum_in_cyl=vbar), by=gear]
} , by=cyl]
dt[,sum(mpg), by=cyl] # test
dt[,{
vbar = mean(mpg)
n = .N
.SD[,(n*vbar-sum(mpg))/(n-.N),by=gear]
} , by=cyl]
dt[,{
vbar = sum(mpg)
n = .N
.SD[,.(n, .N, sum_in_gear_cyl=sum(mpg), sum_in_cyl=vbar), by=gear]
} , by=cyl]
dt[,  .SD[, mean(mpg)], by=gear]
dt[, mean(mpg), by=gear]
dt[,  .SD[, mean(mpg), by=cyl], by=gear]
dt[,  mean(mpg), by=.(cyl, by=gear)]
dt[,  {uid=unique(cyl); .SD[, mean(mpg), by=cyl]} , by=gear]
mean(dt[cyl==4 & gear!=3,mpg]) # testing
dt[,  {uid=unique(cyl); print(uid); .SD[, mean(mpg), by=cyl]} , by=gear]
dt[,{
vbar = sum(mpg)
n = .N
.SD[,.(n, .N, sum_in_gear_cyl=sum(mpg), sum_in_cyl=vbar), by=gear]
} , by=cyl]
dt[,sum(mpg), by=cyl] # test
dt[,{
vbar = sum(mpg)
n = .N
.SD[,.(n, .N, sum_in_gear_cyl=sum(mpg), sum_in_cyl=vbar), by=gear]
} , by=cyl]
dt[,{
vbar = mean(mpg)
n = .N
.SD[,(n*vbar-sum(mpg))/(n-.N),by=gear]
} , by=cyl]
dt[,{
vbar = sum(mpg)
n = .N
.SD[,.(n, .N, sum_in_gear_cyl=sum(mpg), sum_in_cyl=vbar), by=gear]
} , by=cyl]
dt[,{
vbar = mean(mpg)
n = .N
b:=.SD[,(n*vbar-sum(mpg))/(n-.N),by=gear]
} , by=cyl]
dt[,{
vbar = sum(mpg)
n = .N
.SD[,.(n, .N, sum_in_gear_cyl=sum(mpg), sum_in_cyl=vbar), by=gear]
} , by=cyl]
dt <- data.table(mtcars)
dt[,unbiased_mean:=leaveOneOutMean(.SD, ind='mpg', bybig='cyl', bysmall='gear')]
leaveOneOutMean <- function(dt, ind, bybig, bysmall) {
dtmp <- copy(dt) # copy so as not to alter original dt object w intermediate assignments
dtmp <- dtmp[is.na(get(ind))==F,]
dtmp[,`:=`(avg_ind_big=mean(get(ind)), Nbig=.N), by=.(get(bybig))]
dtmp[,`:=`(Nbigsmall=.N, avg_ind_big_small=mean(get(ind))), by=.(get(bybig), get(bysmall))]
dtmp[,unbmean:=(avg_ind_big*Nbig-(Nbigsmall*avg_ind_big_small))/(Nbig-Nbigsmall)]
return(dtmp[,unbmean])
}
dt[,unbiased_mean:=leaveOneOutMean(.SD, ind='mpg', bybig='cyl', bysmall='gear')]
dt[,biased_mean:=mean(mpg), by=cyl]
head(dt)
dt <- data.table(mtcars)
dt <- dt[sample(1:.N, 100000, replace=T), ] # increase # of rows in mtcars
dt$gear <- sample(1:300, nrow(dt), replace=T) # adding in more cateogries
system.time(dt[,unbiased_mean_vectorized:=leaveOneOutMean(.SD, ind='mpg', bybig='cyl', bysmall='gear')])
system.time(tmp <- dt[,dt[!gear %in% unique(dt$gear)[.GRP], mean(mpg), by=cyl], by=gear] )
df <- mtcars
add_column_df <- function(df, addcol='') {
df[,addcol] <- 'Hi!'
print(head(df))
return('hello')
}
dt <- data.table(mtcars)
dt[,gearsL:=list(list(unique(gear))), by=.(cyl)]
head(dt)
dt[,gearL1:=lapply(gear, function(x) x[[1]])]
head(dt)
dt[,gearL1:=lapply(gear, function(x) x[2])
head(dt)
dt[,gearL1:=lapply(gear, function(x) x[2])]
head(dt)
dt[,gearL1:=lapply(gear, function(x) x[[2]])]
dt[,gearL1:=lapply(gearsL, function(x) x[2])]
head(dt)
dt <- mtcars
add_column_df <- function(dt, addcol='') {
dt[,addcol] <- 'Hi!'
print(head(dt))
return('hello')
}
add_column_df(dt, addcol='thing')
head(dt)
dt <- data.table(mtcars)
add_column_df <- function(dt, addcol='') {
dt[,addcol] <- 'Hi!'
print(head(dt))
return('hello')
}
add_column_df(dt, addcol='thing')
head(dt)
dt
dt <- data.table(mtcars)
add_column_df <- function(dt, addcol='') {
dt[,addcol] <- 'Hi!'
dt[,addcol2:='Hi!!!!']
print(head(dt))
return('hello')
}
add_column_df(dt, addcol='thing')
head(dt)
dt[,gearsL:=list(list(unique(gear))), by=.(cyl)]
dt[,gearsLx:=lapply(gear, function(x) setdiff(gearsL[[1]], x))]
head(dt)
dt[,list(list(unique(gear))), by=.(cyl)]
dt[,list(unique(gear)), by=.(cyl)]
dt <- data.table(mtcars)
dt[,gearsL:=list(list(unique(gear))), by=.(cyl)]
head(dt)
KnitPost(overwriteOne='advanced-data-table', site.path='/Users/ajb/Documents/github/simpleblog/')
## might need to rebuild knitr to avoid "cairo graphics error
#library('devtools')
#install_github('yihui/knitr')
#library('knitr')
## source of code
#http://chepec.se/blog/2014/07/16/knitr-jekyll.html
#!/usr/bin/env Rscript
options(stringsAsFactors = F)
# inspiration sources:
# http://www.jonzelner.net/jekyll/knitr/r/2014/07/02/autogen-knitr/
# http://gtog.github.io/workflow/2013/06/12/rmarkdown-to-rbloggers/
KnitPost <- function(site.path='/Users/abrooks/Documents/github/simpleblog/', overwriteAll=F, overwriteOne=NULL) {
if(!'package:knitr' %in% search()) library('knitr')
site.path <- site.path # directory of jekyll blog (including trailing slash)
rmd.path <- paste0(site.path, "_Rmd") # directory where your Rmd-files reside (relative to base)
fig.dir <- "assets/Rfig/" # directory to save figures
posts.path <- paste0(site.path, "_posts/articles/") # directory for converted markdown files
cache.path <- paste0(site.path, "_cache") # necessary for plots
render_jekyll(highlight = "pygments")
opts_knit$set(base.url = '/', base.dir = site.path)
opts_chunk$set(fig.path=fig.dir, fig.width=8.5, fig.height=5.25, dev='svg', cache=F,
warning=F, message=F, cache.path=cache.path, tidy=F)
setwd(rmd.path) # setwd to base
# some logic to help us avoid overwriting already existing md files
files.rmd <- data.frame(rmd = list.files(path = rmd.path,
full.names = T,
pattern = "\\.Rmd$",
ignore.case = T,
recursive = F), stringsAsFactors=F)
files.rmd$corresponding.md.file <- paste0(posts.path, "/", basename(gsub(pattern = "\\.Rmd$", replacement = ".md", x = files.rmd$rmd)))
files.rmd$corresponding.md.exists <- file.exists(files.rmd$corresponding.md.file)
## determining which posts to overwrite from parameters overwriteOne & overwriteAll
files.rmd$md.overwriteAll <- overwriteAll
if(is.null(overwriteOne)==F) files.rmd$md.overwriteAll[grep(overwriteOne, files.rmd[,'rmd'], ignore.case=T)] <- T
files.rmd$md.render <- F
for (i in 1:dim(files.rmd)[1]) {
if (files.rmd$corresponding.md.exists[i] == F) {
files.rmd$md.render[i] <- T
}
if ((files.rmd$corresponding.md.exists[i] == T) && (files.rmd$md.overwriteAll[i] == T)) {
files.rmd$md.render[i] <- T
}
}
# For each Rmd file, render markdown (contingent on the flags set above)
for (i in 1:dim(files.rmd)[1]) {
if (files.rmd$md.render[i] == T) {
out.file <- knit(as.character(files.rmd$rmd[i]),
output = as.character(files.rmd$corresponding.md.file[i]),
envir = parent.frame(),
quiet = T)
message(paste0("KnitPost(): ", basename(files.rmd$rmd[i])))
}
}
}
## actually using function
#KnitPost(overwriteOne='test', site.path='/Users/ajb/Documents/github/simpleblog/')
KnitPost(overwriteOne='advanced-data-table', site.path='/Users/ajb/Documents/github/simpleblog/')
